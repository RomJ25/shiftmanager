@page
@model ShiftManager.Pages.My.NotificationCenterModel
@using Microsoft.Extensions.Localization
@using ShiftManager.Resources
@inject IStringLocalizer<SharedResources> Localizer
@{
    Layout = "_Layout";
}

<div style="max-width: 1200px; margin: 0 auto;">
    <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 2rem;">
        <h2 style="color: var(--text); margin: 0;">@Localizer["NotificationCenter"]</h2>

        @if (Model.Notifications.Any(n => !n.IsRead))
        {
            <form method="post" asp-page-handler="MarkAllAsRead" style="display: inline;">
                @Html.AntiForgeryToken()
                <button type="submit" style="background: var(--primary); color: white; border: none; padding: 0.5rem 1rem; border-radius: 0.5rem; font-size: 0.9rem; cursor: pointer;">
                    @Localizer["MarkAllAsRead", Model.UnreadCount]
                </button>
            </form>
        }
    </div>

    @if (!string.IsNullOrEmpty(Model.Message))
    {
        <div class="alert alert-success" style="margin-bottom: 2rem; padding: 1rem; background: var(--success); color: white; border-radius: 0.5rem;">
            @Model.Message
        </div>
    }

    @if (!string.IsNullOrEmpty(Model.Error))
    {
        <div class="alert alert-danger" style="margin-bottom: 2rem; padding: 1rem; background: var(--danger); color: white; border-radius: 0.5rem;">
            @Model.Error
        </div>
    }

    @if (Model.Notifications.Any())
    {
        <div class="notification-list">
            @foreach (var notification in Model.Notifications)
            {
                <div class="notification-item @notification.CssClass @(notification.IsRead ? "read" : "unread")"
                     style="border: 1px solid var(--border); border-radius: 0.5rem; margin-bottom: 1rem; padding: 1rem; background: var(--surface); position: relative;">

                    <!-- Unread indicator -->
                    @if (!notification.IsRead)
                    {
                        <div class="unread-indicator" style="position: absolute; top: 1rem; right: 1rem; width: 8px; height: 8px; background: var(--primary); border-radius: 50%;"></div>
                    }

                    <div style="display: flex; align-items: flex-start; gap: 1rem;">
                        <!-- Icon -->
                        <div class="notification-icon" style="font-size: 1.5rem; flex-shrink: 0; margin-top: 0.25rem;">
                            @notification.Icon
                        </div>

                        <!-- Content -->
                        <div style="flex: 1; min-width: 0;">
                            <h4 style="margin: 0 0 0.5rem 0; color: var(--text); font-size: 1rem;">
                                @notification.Title
                            </h4>
                            <p style="margin: 0 0 0.75rem 0; color: var(--text); line-height: 1.4;">
                                @notification.Message
                            </p>
                            <div style="display: flex; align-items: center; gap: 1rem; margin-bottom: 0.75rem;">
                                <small style="color: var(--muted);">
                                    @notification.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")
                                </small>
                                @if (notification.IsRead && notification.ReadAt.HasValue)
                                {
                                    <small style="color: var(--muted);">
                                        @Localizer["Read"] @notification.ReadAt.Value.ToString("MMM dd 'at' HH:mm")
                                    </small>
                                }
                            </div>

                            <!-- Actions -->
                            <div style="display: flex; gap: 0.5rem;">
                                @if (!notification.IsRead)
                                {
                                    <form method="post" asp-page-handler="MarkAsRead" style="display: inline;">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="id" value="@notification.Id" />
                                        <button type="submit" style="background: var(--primary); color: white; border: none; padding: 0.25rem 0.75rem; border-radius: 0.25rem; font-size: 0.8rem; cursor: pointer;">
                                            @Localizer["MarkAsRead"]
                                        </button>
                                    </form>
                                }

                                <form method="post" asp-page-handler="Delete" style="display: inline;"
                                      onsubmit="return confirm('@Localizer["DeleteConfirm"]');">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@notification.Id" />
                                    <button type="submit" style="background: var(--danger); color: white; border: none; padding: 0.25rem 0.75rem; border-radius: 0.25rem; font-size: 0.8rem; cursor: pointer;">
                                        @Localizer["Delete"]
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-state" style="text-align: center; padding: 4rem 2rem; color: var(--muted);">
            <div style="font-size: 3rem; margin-bottom: 1rem;">ðŸ“­</div>
            <h3 style="margin: 0 0 0.5rem 0; color: var(--text);">@Localizer["NoNotifications"]</h3>
            <p style="margin: 0;">@Localizer["AllCaughtUp"]</p>
        </div>
    }
</div>

<style>
    .notification-item.unread {
        border-left: 4px solid var(--primary);
        background: var(--surface);
    }

    .notification-item.read {
        opacity: 0.8;
    }

    .notification-approved {
        border-left-color: var(--success) !important;
    }

    .notification-declined {
        border-left-color: var(--danger) !important;
    }

    .notification-shift-added {
        border-left-color: var(--info) !important;
    }

    .notification-shift-removed {
        border-left-color: var(--warning) !important;
    }

    .notification-item button:hover {
        opacity: 0.9;
        transform: translateY(-1px);
        transition: all 0.2s ease;
    }

    .notification-icon {
        filter: grayscale(0.3);
    }

    .notification-item.unread .notification-icon {
        filter: none;
    }
</style>